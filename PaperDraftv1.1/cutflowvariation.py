import numpy as np
import sklearn.metrics as metrics
import sys

import uproot4 as uproot

filename = "../March2023/results/bkgEval.root"
print(filename)

bkgfile = uproot.open(filename)
#bkgfile = uproot.open(sys.argv[1])
print("Loading score")
frontEcal = bkgfile["BDTree/frontEcal"].array(library="np")
summedEcal = bkgfile["BDTree/summedDet"].array(library="np")
bkg = bkgfile["BDTree/Score"].array(library="np")
track = bkgfile["BDTree/passesTrackVeto"].array(library="np")
weight = bkgfile["BDTree/eventWeight"].array(library="np")
hcal = bkgfile["BDTree/maxPE"].array(library="np")

print("Loaded bkg")

i = 0
n = 0
m = 0
l = 0

#eventsum = 0
#for k in range(0,len(bkg)):
#    eventsum += weight[k]*550
#print("Total weight")
#print(eventsum)

#tpr = [0.450001861588804, 0.5001013531682174, 0.5501119021714399, 0.6001224511746626, 0.6501619582259472, 0.7001766440931787, 0.7501830562323925, 0.8001873999396018, 0.8501938120788155, 0.9001960873540205, 0.9502087047892475]
#threshold = [0.9999159574508667, 0.9998792409896851, 0.9998286962509155, 0.9997585415840149, 0.9996567964553833, 0.9995073080062866, 0.9992732405662537, 0.9988827109336853, 0.9981437921524048, 0.9963878393173218, 0.9894786477088928]

tpr = [0.31052749152977094, 0.32094204667209975, 0.33137521770246847, 0.34147330274811877, 0.35167274096198636, 0.3618101262157209, 0.3719433746054466, 0.38223175539550486, 0.3922967455290842, 0.4025706472951115, 0.4126108162446376, 0.42268821697024356, 0.4327366596477874, 0.44288645549354855, 0.4529059401230303, 0.4629088772964766, 0.47299041488609145, 0.48305333658766636, 0.493076958081157, 0.5031874537188339, 0.513260717580431, 0.5232698600498906, 0.5332707287913324, 0.5432778028287876, 0.5533076296182916, 0.5633188405197556, 0.5733341882852285, 0.5833950415547989, 0.5934765791444138, 0.6034898584778823, 0.6135383011554261, 0.623553648920899, 0.6336020915984428, 0.643623644659929, 0.653638992425402, 0.663664682350897, 0.6736655510923389, 0.6837098569058739, 0.6937231362393425, 0.7037260734127887, 0.7137538317702882, 0.7237774532637788, 0.7337969378932606, 0.7438184909547468, 0.7538214281281932, 0.7638429811896793, 0.7738479867951301, 0.7838716082886207, 0.7938952297821114, 0.8039002353875621, 0.8139052409930129, 0.8239081781664591, 0.833909046907901, 0.8439140525133517, 0.8539190581188024, 0.8639199268602443, 0.8739270008976995, 0.8839278696391414, 0.8939390805406053, 0.9039399492820472, 0.9139428864554936, 0.9239437551969354, 0.9339549660983995, 0.9439620401358546, 0.9539773879013275, 0.9639865303707871, 0.973987399112229, 0.9839882678536709, 0.9939891365951127]
threshold = [0.9999717473983765, 0.9999692440032959, 0.9999665021896362, 0.999963641166687, 0.9999606609344482, 0.9999573230743408, 0.9999537467956543, 0.9999499320983887, 0.999945878982544, 0.999941349029541, 0.999936580657959, 0.9999315738677979, 0.9999260902404785, 0.9999202489852905, 0.9999141693115234, 0.9999076128005981, 0.9999004602432251, 0.9998929500579834, 0.999885082244873, 0.9998766183853149, 0.9998675584793091, 0.9998577833175659, 0.9998477697372437, 0.999836802482605, 0.9998250603675842, 0.9998124241828918, 0.9997991919517517, 0.9997848868370056, 0.9997695088386536, 0.9997527003288269, 0.9997343420982361, 0.9997151494026184, 0.9996945858001709, 0.9996721744537354, 0.9996479749679565, 0.999622106552124, 0.999594509601593, 0.999563992023468, 0.9995307922363281, 0.9994943141937256, 0.9994538426399231, 0.9994101524353027, 0.9993628859519958, 0.9993102550506592, 0.9992509484291077, 0.9991870522499084, 0.9991158843040466, 0.9990352392196655, 0.9989470839500427, 0.9988441467285156, 0.9987296462059021, 0.9985985159873962, 0.9984484910964966, 0.9982700347900391, 0.998063862323761, 0.9978175163269043, 0.9975253939628601, 0.9971676468849182, 0.9967212080955505, 0.9961757659912109, 0.9954540729522705, 0.9944939017295837, 0.993171215057373, 0.9911729693412781, 0.9881628155708313, 0.9828413724899292, 0.9722954034805298, 0.9411827921867371, 0.745387613773346]

#tpr = [0.85]
#threshold = [0.99814772605896]

bdtresults = [0 for x  in tpr]
hcalresults=[0 for x in tpr]

#for index,cut in enumerate(threshold):
i = 0
n = 0
m = 0
l = 0
p = 0

#print("TPR")
#print(tpr[index])
#print("Bkg events:")
#print(len(bkg))
for k in range(0,len(bkg)):
    if k % 1e6 == 0:
        print(k, flush=True)
    if(frontEcal[k] < 3160):
        i += weight[k]*550
        if(summedEcal[k] < 3160):
            p += weight[k]*550
            if(track[k]):
                n += weight[k]*550
                #if(bkg[k] > 0.9998927116394043):
                #August cut
                #if(bkg[k] > 0.99814772605896):
                for index,cut in enumerate(threshold):
                    if(bkg[k] > cut):
                        #m += weight[k]*550
                        bdtresults[index] += weight[k]*550
                        #m += 1
                        if(hcal[k] < 8):
                            #l += weight[k]*550
                            hcalresults[index] += weight[k]*550

#print("trig: " + str(i))
#print("track veto:" + str(n))
#print("BDT: " + str(m))
#print("hcal: " + str(l))
for k in range(0,len(tpr)):
    print(str(tpr[k]) + ":" + str(bdtresults[k])+":"+str(hcalresults[k]), flush=True)
